%{
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <map>
#include <vector>

#include "ast.hpp"
#include "izraz.hpp"

#define YYDEBUG 1

using namespace std;

 void yyerror(string s) {
   cerr << s << endl;
   exit(EXIT_FAILURE);
 }

 extern int yylex();
 
 vector<string> dekl_real;
 vector<string> dekl_int;

%}

%union {
  string *s;
  float x;
  vector<string*> *vs;
  char c;
  Naredba* n;
  vector<Naredba*> *vn;
  Izraz *i;
}

%token program_token uses_token crt_token
%token begin_token end_token writeln_token var_token
%token div_token mod_token
%token if_token then_token else_token while_token do_token

%token <s> string_token id_token
%token <x> broj_token
%token <c> tip_token

%type <n> Naredba Blok
%type <i> E

%type <vs> NizProm
%type <vn> NizNaredbi

%nonassoc then_token
%nonassoc else_token
%right dodjela_token
%left '<' '>'
%left '+' '-'
%left '*' div_token mod_token

%%
Program: program_token id_token ';' uses_token crt_token ';' Dekl_promjenljivih Blok '.' {
  // brisemo ime funkcije
  delete $2;
  
  $8->codegen();
 }
;

Dekl_promjenljivih: var_token NizDeklaracija {

  }
  | {
  
  }
  ;
  
NizDeklaracija: NizDeklaracija NizProm ':' tip_token ';' {
		// tip_token moze biti i = integer ili r = real
		if($4 == 'r'){
			// upisujemo u niz deklarisanih realnih promjenljivih njihov naziv
			for(unsigned long i = 0; i < (*$2).size(); i++){
				dekl_real.push_back((*(*$2)[i]));
				delete (*$2)[i];
			}
			
		}
		else if($4 == 'i'){
		
		}
    // ispis deklarisanih promjenljivih i njihovog tipa - provjeravamo da li ispravno radi
    /*
    for(unsigned long i = 0; i < (*$2).size(); i++){
      cout << (*(*$2)[i]) << " ";
		}
    cout << ": " << $4;
    cout << endl;
    */
  }
  | NizProm ':' tip_token ';' {
		// tip_token moze biti i = integer ili r = real
		if($3 == 'r'){
			// upisujemo u niz deklarisanih realnih promjenljivih njihov naziv
			
			for(unsigned long i = 0; i < (*$1).size(); i++){
				dekl_real.push_back((*(*$1)[i]));
				delete (*$1)[i];
			}
		}
		else if($3 == 'i'){
		
		}
    
  }
  ;

NizProm: NizProm ',' id_token {
    $$ = $1;
    $$->push_back($3);
  }
  | id_token {
    $$ = new vector<string*>();
    $$->push_back($1);
  }
  ;


Blok: begin_token NizNaredbi end_token {
	$$ = new Blok(*$2);
	delete $2;
 }
;

NizNaredbi: NizNaredbi Naredba ';' {
  $$ = $1;
  $$->push_back($2);
 }
|  Naredba ';' {
  $$ = new vector<Naredba*>();
  $$->push_back($1);
 }
;

Naredba: writeln_token '(' E ')' {
	$$ = new IspisIzraza($3);
 }
|  id_token dodjela_token E  {
  $$ = new Dodjela(*$1, $3);
  delete $1;
 }
| if_token E then_token Naredba {
	$$ = new IfThen($2, $4);
}
| if_token E then_token Naredba else_token Naredba {
	$$ = new IfThenElse($2, $4, $6);
}
| while_token E do_token Naredba {
	$$ = new WhileDo($2, $4);
}
| Blok {
  $$ = $1;
	}
;

E: E '+' E  {
	$$ = new Zbir($1, $3);
 }
|  E '-' E {
	$$ = new Razlika($1, $3);
 }
|  E '*' E {
  $$ = new Proizvod($1, $3);
 }
|  E div_token E {
	$$ = new Kolicnik($1, $3);
 }
|  E mod_token E {
	$$ = new Mod($1, $3);
 }
|  E '<' E {
	$$ = new Manje($1, $3);
 }
|  E '>' E {
	$$ = new Vece($1, $3);
 }
| '(' E ')' {
  $$ = $2;
 }
|  broj_token {
  $$ = new Konstanta($1);
 }
| id_token {
  $$ = new Promjenljiva(*$1);
  delete $1;
 }
;

%%

extern FILE* yyin;

extern LLVMContext TheContext;
extern Module *TheModule;
extern IRBuilder<> Builder;

Value *Str;
StructType *VektorTip;
Function *PrintfFja;
Function *MainFja;

int main(int argc, char **argv) {
  //yydebug = 1;
  
  /*
  yyin = fopen(argc == 2 ? argv[1] : argv[2], "r");
  nazubljivanje = (argc == 3);
  if (yyin == NULL)
    yyerror("Neuspjesno otvaranje fajla sa kodom");
  */
  
  InitializeModuleAndPassManager();
  
  /* printf fja */
  // deklaracija
  FunctionType *FT1 = FunctionType::get(IntegerType::getInt32Ty(TheContext), PointerType::get(Type::getInt8Ty(TheContext), 0), true);
  PrintfFja = Function::Create(FT1, Function::ExternalLinkage, "printf", TheModule);
  
  /* fja main */
  vector<Type*> v(0);
  // deklaracija
  FunctionType* FT2 = FunctionType::get(Type::getInt32Ty(TheContext), v, false);
  MainFja = Function::Create(FT2, Function::ExternalLinkage, "main", TheModule);
  
  // definicija
  BasicBlock *BB = BasicBlock::Create(TheContext, "entry", MainFja);
  Builder.SetInsertPoint(BB);
  
  /* globalni string potreban za ispis float broja */
  Str = Builder.CreateGlobalStringPtr("%f\n");

  yyparse();
  
  /* zavrsetak main fje */
  Builder.CreateRet(ConstantInt::get(TheContext, APInt(32, 0)));
  verifyFunction(*MainFja);
  
  TheModule->dump();
  
  delete TheModule;
  
  /*
  fclose(yyin);
  */
  
  return 0;
}

